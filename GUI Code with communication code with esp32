import sys
# import paho.mqtt.client as mqtt
from PyQt5.QtWidgets import (QApplication, QMainWindow, QWidget, QHBoxLayout,
                           QLabel, QPushButton, QStackedWidget,
                           QFrame, QVBoxLayout, QSizePolicy, QGraphicsDropShadowEffect,
                           QGraphicsBlurEffect)
from PyQt5.QtCore import Qt, QSize, QPoint
from PyQt5.QtGui import QFont, QFontDatabase, QImage, QPalette, QBrush, QColor, QPixmap
import io

sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')

#def on_connect(client, userdata, flags, rc):
 #   if rc == 0:
  #      print("[OK] Connected to MQTT Broker")
   # else:
    #    print(f"[ERROR] Failed to connect. Code: {rc}")

class MainWindow(QMainWindow):
    def _init_(self):
        super()._init_()
        self.setWindowTitle("SightSwitch")
        self.setMinimumSize(1200, 600)

        # Set background image with blur
        self.setBackground()
        
        # MQTT setup (comment these lines to run GUI only)
 #       self.mqtt_broker = "192.168.19.178"
  #      self.mqtt_port = 1883
   #     self.init_mqtt()

        # Central widget setup
        self.central_widget = QWidget()
        self.setCentralWidget(self.central_widget)
        self.main_layout = QVBoxLayout(self.central_widget)
        self.main_layout.setContentsMargins(50, 50, 50, 50)
        
        # Create translucent container with drop shadow
        self.container = QFrame(self.central_widget)
        self.container.setObjectName("mainContainer")
        self.container.setStyleSheet("""
            #mainContainer {
                background-color: rgba(255, 255, 255, 0.15);
                border-radius: 20px;
            }
        """)
        
        # Add drop shadow
        shadow = QGraphicsDropShadowEffect()
        shadow.setBlurRadius(20)
        shadow.setXOffset(0)
        shadow.setYOffset(0)
        shadow.setColor(QColor(0, 0, 0, 180))
        self.container.setGraphicsEffect(shadow)
        
        self.container_layout = QVBoxLayout(self.container)
        self.container_layout.setContentsMargins(30, 30, 30, 30)
        self.main_layout.addWidget(self.container)
        
        # Create header and pages
        self.create_header()
        self.stacked_widget = QStackedWidget()
        self.container_layout.addWidget(self.stacked_widget)
        self.create_home_page()
        self.create_device_pages()

    def setBackground(self):
        try:
        # Load the background image
            background = QImage(r'C:/Users/Guest_124/Downloads/Py_Tr/background2.jpg')
        
        # Convert QImage to QPixmap for better handling
            background_pixmap = QPixmap.fromImage(background)
        
        # Scale the image to fill the window while maintaining aspect ratio
            scaled_pixmap = background_pixmap.scaled(
                self.size(), 
                Qt.KeepAspectRatioByExpanding, 
                Qt.SmoothTransformation
            )
        
        # Create a new label for the blurred background
            self.bg_label = QLabel(self)
            self.bg_label.setPixmap(scaled_pixmap)
        
        # Apply the blur effect
            blur_effect = QGraphicsBlurEffect()
            blur_effect.setBlurRadius(10)  # Adjust this value to increase/decrease blur
            self.bg_label.setGraphicsEffect(blur_effect)
        
        # Make sure the background label fills the window
            self.bg_label.setGeometry(0, 0, self.width(), self.height())
        
        # Set the stylesheet for the main window
            self.setStyleSheet("""
                QMainWindow {
                    background: transparent;
                }
            """)
        
        # Make sure the background stays behind other widgets
            self.bg_label.lower()
        
        except Exception as e:
            print(f"Error setting background: {e}")

# Add this method to handle window resizing
    def resizeEvent(self, event):
        super().resizeEvent(event)
        try:
        # Resize the background label to match the new window size
            self.bg_label.setGeometry(0, 0, self.width(), self.height())
        
        # Reload and rescale the background image
            background = QImage(r'C:\Users\Guest_124\Downloads\Py_Tr\background2.jpg')
            background_pixmap = QPixmap.fromImage(background)
            scaled_pixmap = background_pixmap.scaled(
                self.size(), 
                Qt.KeepAspectRatioByExpanding, 
                Qt.SmoothTransformation
            )
            self.bg_label.setPixmap(scaled_pixmap)
        except Exception as e:
            print(f"Error in resize event: {e}")

#    def init_mqtt(self):
 #       self.client = mqtt.Client()
  #      self.client.on_connect = on_connect
   #     self.client.connect(self.mqtt_broker, self.mqtt_port, 60)
    #    self.client.loop_start()

    def publish(self, topic, message):
        print(f"ðŸ“¤ Publishing to {topic}: {message}")
        try:
            self.client.publish(topic, message)
        except:
            print(f"Would publish to {topic}: {message}")

    def create_header(self):
        header = QWidget()
        header_layout = QHBoxLayout(header)
        header_layout.setContentsMargins(0, 0, 0, 20)

        title = QLabel("Hi")
        title_font = QFont()
        title_font.setPointSize(24)
        title_font.setBold(True)
        title.setFont(title_font)
        title.setStyleSheet("color: white;")
        header_layout.addWidget(title)
        
        self.connection_status = QLabel("MQTT: Connected")
        self.connection_status.setStyleSheet("color: #4CAF50; font-size: 18px;")
        header_layout.addWidget(self.connection_status, 0, Qt.AlignRight)
        self.container_layout.addWidget(header)

    def create_home_page(self):
        page = QWidget()
        layout = QVBoxLayout(page)
        layout.setContentsMargins(0, 0, 0, 0)
        layout.setSpacing(30)

        welcome = QLabel("Welcome to SightSwitch")
        welcome.setStyleSheet("color: white; font-weight: bold; font-size: 32px;")
        welcome.setAlignment(Qt.AlignCenter)
        layout.addWidget(welcome)

        buttons_widget = QWidget()
        buttons_layout = QHBoxLayout(buttons_widget)
        buttons_layout.setSpacing(20)
        
        devices = [
            ("Light", "light", "#FFD34D"),
            ("Fan", "fan", "#64B5F6"),
            ("Socket", "socket", "#81C784"),
        ]
        
        for name, device_type, color in devices:
            btn = self.create_device_button(name, device_type, color)
            buttons_layout.addWidget(btn)

        emergency_btn = self.create_emergency_button()
        buttons_layout.addWidget(emergency_btn)
        
        layout.addWidget(buttons_widget)
        self.stacked_widget.addWidget(page)

    def create_device_button(self, name, device_type, color):
        btn = QPushButton(name)
        btn.setFont(QFont('Arial', 20))
        btn.setCursor(Qt.PointingHandCursor)
        btn.setStyleSheet("""
            QPushButton {
                background-color: rgba(0, 0, 0, 0.3);
                color: white;
                border-radius: 15px;
                font-weight: bold;
                padding: 20px;
                min-height: 100px;
            }
            QPushButton:hover {
                background-color: rgba(220, 220, 220, 0.85);
            }
        """)
        btn.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        btn.clicked.connect(lambda: self.show_device_page(device_type))
        return btn

    def create_emergency_button(self):
        btn = QPushButton("ðŸš¨ Emergency SOS")
        btn.setFont(QFont('Arial', 20))
        btn.setCursor(Qt.PointingHandCursor)
        btn.setStyleSheet("""
            QPushButton {
                background-color: rgba(255, 0, 0, 0.4);
                color: white;
                border-radius: 15px;
                font-weight: bold;
                padding: 20px;
                min-height: 100px;
            }
            QPushButton:hover {
                background-color: rgba(255, 0, 0, 0.6);
            }
        """)
        btn.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        btn.clicked.connect(lambda: self.publish("home/emergency", "SOS"))
        return btn

    def create_device_pages(self):
        # Light Control Page
        light_page = self.create_control_page("Light Control", [
            ("Turn ON", "home/led", "ON", "#4CAF50"),
            ("Turn OFF", "home/led", "OFF", "#F44336")
        ])
        self.stacked_widget.addWidget(light_page)

        # Fan Control Page
        fan_page = self.create_control_page("Fan Control", [
            ("LOW", "home/fan/speed", "LOW", "#64B5F6"),
            ("MEDIUM", "home/fan/speed", "MEDIUM", "#64B5F6"),
            ("HIGH", "home/fan/speed", "HIGH", "#64B5F6"),
            ("Turn OFF", "home/fan", "OFF", "#F44336")
        ])
        self.stacked_widget.addWidget(fan_page)

        # Socket Control Page
        socket_page = self.create_control_page("Socket Control", [
            ("Turn ON", "home/socket", "ON", "#4CAF50"),
            ("Turn OFF", "home/socket", "OFF", "#F44336")
        ])
        self.stacked_widget.addWidget(socket_page)

    def create_control_page(self, title, controls):
        page = QWidget()
        layout = QVBoxLayout(page)
        layout.setContentsMargins(0, 0, 0, 0)
        layout.setSpacing(30)

        title_label = QLabel(title)
        title_label.setStyleSheet("color: black; font-weight: bold; font-size: 32px;")
        title_label.setAlignment(Qt.AlignCenter)
        layout.addWidget(title_label)

        controls_widget = QWidget()
        controls_layout = QHBoxLayout(controls_widget)
        controls_layout.setSpacing(20)

        for label, topic, message, color in controls:
            btn = QPushButton(label)
            btn.setFont(QFont('Arial', 20))
            btn.setCursor(Qt.PointingHandCursor)
            btn.setStyleSheet("""
                QPushButton {
                    background-color: rgba(240, 240, 240, 0.7);
                    color: black;
                    border-radius: 15px;
                    font-weight: bold;
                    padding: 20px;
                    min-height: 100px;
                }
                QPushButton:hover {
                    background-color: rgba(220, 220, 220, 0.85);
                }
            """)
            btn.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
            
            # Create a new function that captures the current topic and message
            def create_click_handler(t, m):
                return lambda: self.button_clicked(t, m)
            
            btn.clicked.connect(create_click_handler(topic, message))
            controls_layout.addWidget(btn)

        emergency_btn = self.create_emergency_button()
        controls_layout.addWidget(emergency_btn)

        layout.addWidget(controls_widget)
        return page

    def button_clicked(self, topic, message):
        try:
            self.publish(topic, message)
            self.stacked_widget.setCurrentIndex(0)  # Return to home page
        except Exception as e:
            print(f"Error in button_clicked: {e}")
            self.stacked_widget.setCurrentIndex(0)  # Ensure we still return to home page

    def show_device_page(self, device_type):
        page_index = {"light": 1, "fan": 2, "socket": 3}
        self.stacked_widget.setCurrentIndex(page_index[device_type])

if _name_ == "_main_":
    app = QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec_())
